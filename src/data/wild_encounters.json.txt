{{ doNotModifyHeader }}

## for wild_encounter_group in wild_encounter_groups
{% if wild_encounter_group.for_maps %}
## for wild_encounter_field in wild_encounter_group.fields
{% if not existsIn(wild_encounter_field, "groups") %}
## for encounter_rate in wild_encounter_field.encounter_rates
{% if loop.index == 0 %}
#define ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_SLOT_{{ loop.index }} {{ encounter_rate }} {% else %}#define ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_SLOT_{{ loop.index }} ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_SLOT_{{ subtract(loop.index, 1) }} + {{ encounter_rate }}{% endif %} {{ setVarInt(wild_encounter_field.type, loop.index) }}
## endfor
#define ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_TOTAL (ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_SLOT_{{ getVar(wild_encounter_field.type) }})
{% else %}
## for field_subgroup_key, field_subgroup_subarray in wild_encounter_field.groups
## for field_subgroup_index in field_subgroup_subarray
{% if loop.index == 0 %}
#define ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_{{ upper(field_subgroup_key) }}_SLOT_{{ field_subgroup_index }} {{ at(wild_encounter_field.encounter_rates, field_subgroup_index) }} {% else %}#define ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_{{ upper(field_subgroup_key) }}_SLOT_{{ field_subgroup_index }} ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_{{ upper(field_subgroup_key) }}_SLOT_{{ getVar("previous_slot") }} + {{ at(wild_encounter_field.encounter_rates, field_subgroup_index) }}{% endif %}{{ setVarInt(concat(wild_encounter_field.type, field_subgroup_key), field_subgroup_index) }}{{ setVarInt("previous_slot", field_subgroup_index) }}
## endfor
#define ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_{{ upper(field_subgroup_key) }}_TOTAL (ENCOUNTER_CHANCE_{{ upper(wild_encounter_field.type) }}_{{ upper(field_subgroup_key) }}_SLOT_{{ getVar(concat(wild_encounter_field.type, field_subgroup_key)) }})
## endfor
{% endif %}
## endfor
{% endif %}



## set extra_levels = 10

## for encounter in wild_encounter_group.encounters
{% if existsIn(encounter, "land_mons") %}
## set total_min_level = 0
## set total_max_level = 0
## set num_pokemon = length(encounter.land_mons.mons)

## for wild_mon in encounter.land_mons.mons
{% set total_min_level = total_min_level + wild_mon.min_level %}
{% set total_max_level = total_max_level + wild_mon.max_level %}
## endfor

## set average_level = round(((total_min_level + total_max_level) / (num_pokemon * 2)), 0)

const struct WildPokemon {{ encounter.base_label }}_LandMons[] =
{
## for wild_mon in encounter.land_mons.mons
    { {{ average_level - 2 + extra_levels }}, {{ average_level + 2 + extra_levels }}, {{ wild_mon.species }} },
## endfor
};

const struct WildPokemonInfo {{ encounter.base_label }}_LandMonsInfo = { {{encounter.land_mons.encounter_rate}}, {{ encounter.base_label }}_LandMons };
{% endif %}
{% if existsIn(encounter, "water_mons") %}
## set total_min_level = 0
## set total_max_level = 0
## set num_pokemon = length(encounter.water_mons.mons)

## for wild_mon in encounter.water_mons.mons
{% set total_min_level = total_min_level + wild_mon.min_level %}
{% set total_max_level = total_max_level + wild_mon.max_level %}
## endfor

## set average_level = round(((total_min_level + total_max_level) / (num_pokemon * 2)), 0)

const struct WildPokemon {{ encounter.base_label }}_WaterMons[] =
{
## for wild_mon in encounter.water_mons.mons
    { {{ average_level + extra_levels }}, {{ average_level + 10 + extra_levels }}, {{ wild_mon.species }} },
## endfor
};

const struct WildPokemonInfo {{ encounter.base_label }}_WaterMonsInfo = { {{encounter.water_mons.encounter_rate}}, {{ encounter.base_label }}_WaterMons };
{% endif %}
{% if existsIn(encounter, "rock_smash_mons") %}
## set total_min_level = 0
## set total_max_level = 0
## set num_pokemon = length(encounter.rock_smash_mons.mons)

## for wild_mon in encounter.rock_smash_mons.mons
{% set total_min_level = total_min_level + wild_mon.min_level %}
{% set total_max_level = total_max_level + wild_mon.max_level %}
## endfor

## set average_level = round(((total_min_level + total_max_level) / (num_pokemon * 2)), 0)

const struct WildPokemon {{ encounter.base_label }}_RockSmashMons[] =
{
## for wild_mon in encounter.rock_smash_mons.mons
    { {{ average_level - 4 + extra_levels }}, {{ average_level + 4 + extra_levels }}, {{ wild_mon.species }} },
## endfor
};

const struct WildPokemonInfo {{ encounter.base_label }}_RockSmashMonsInfo = { {{encounter.rock_smash_mons.encounter_rate}}, {{ encounter.base_label }}_RockSmashMons };
{% endif %}
{% if existsIn(encounter, "fishing_mons") %}
## set total_min_level_old_rod = 0
## set total_max_level_old_rod = 0
## set total_min_level_good_rod = 0
## set total_max_level_good_rod = 0
## set total_min_level_super_rod = 0
## set total_max_level_super_rod = 0
## set num_pokemon_old_rod = 2
## set num_pokemon_good_rod = 3
## set num_pokemon_super_rod = 5

## for wild_mon in encounter.fishing_mons.mons
{% if loop.index <= 1 %}
{% set total_min_level_old_rod = total_min_level_old_rod + wild_mon.min_level %}
{% set total_max_level_old_rod = total_max_level_old_rod + wild_mon.max_level %}
{% else if loop.index >= 5 %}
{% set total_min_level_super_rod = total_min_level_super_rod + wild_mon.min_level %}
{% set total_max_level_super_rod = total_max_level_super_rod + wild_mon.max_level %}
{% else %}
{% set total_min_level_good_rod = total_min_level_good_rod + wild_mon.min_level %}
{% set total_max_level_good_rod = total_max_level_good_rod + wild_mon.max_level %}
{% endif %}
## endfor

## set average_level_old_rod = round(((total_min_level_old_rod + total_max_level_old_rod) / (num_pokemon_old_rod * 2)), 0)
## set average_level_good_rod = round(((total_min_level_good_rod + total_max_level_good_rod) / (num_pokemon_good_rod * 2)), 0)
## set average_level_super_rod = round(((total_min_level_super_rod + total_max_level_super_rod) / (num_pokemon_super_rod * 2)), 0)

const struct WildPokemon {{ encounter.base_label }}_FishingMons[] =
{
## for wild_mon in encounter.fishing_mons.mons
{% if loop.index <= 1 %}
    { {{ average_level_old_rod - 3 + extra_levels }}, {{ average_level_old_rod + 7 + extra_levels }}, {{ wild_mon.species }} },
{% else if loop.index >= 5 %}
    { {{ average_level_super_rod - 3 + extra_levels }}, {{ average_level_super_rod + 7 + extra_levels }}, {{ wild_mon.species }} },
{% else %}
    { {{ average_level_good_rod - 3 + extra_levels }}, {{ average_level_good_rod + 7 + extra_levels }}, {{ wild_mon.species }} },
{% endif %}
## endfor
};

const struct WildPokemonInfo {{ encounter.base_label }}_FishingMonsInfo = { {{encounter.fishing_mons.encounter_rate}}, {{ encounter.base_label }}_FishingMons };
{% endif %}

{% if existsIn(encounter, "hidden_mons") %}
const struct WildPokemon {{ encounter.base_label }}_HiddenMons[] =
{
## for wild_mon in encounter.hidden_mons.mons
    { {{ wild_mon.min_level }}, {{ wild_mon.max_level }}, {{ wild_mon.species }} },
## endfor
};

const struct WildPokemonInfo {{ encounter.base_label }}_HiddenMonsInfo = { {{encounter.hidden_mons.encounter_rate}}, {{ encounter.base_label }}_HiddenMons };
{% endif %}

## endfor
const struct WildPokemonHeader {{ wild_encounter_group.label }}[] =
{
## for encounter in wild_encounter_group.encounters
    {
        .mapGroup = {% if wild_encounter_group.for_maps %}MAP_GROUP({{ encounter.map }}){% else %}0{% endif %},
        .mapNum = {% if wild_encounter_group.for_maps %}MAP_NUM({{ encounter.map }}){% else %}{{ loop.index1 }}{% endif %},
        .landMonsInfo = {% if existsIn(encounter, "land_mons") %}&{{ encounter.base_label }}_LandMonsInfo{% else %}NULL{% endif %},
        .waterMonsInfo = {% if existsIn(encounter, "water_mons") %}&{{ encounter.base_label }}_WaterMonsInfo{% else %}NULL{% endif %},
        .rockSmashMonsInfo = {% if existsIn(encounter, "rock_smash_mons") %}&{{ encounter.base_label }}_RockSmashMonsInfo{% else %}NULL{% endif %},
        .fishingMonsInfo = {% if existsIn(encounter, "fishing_mons") %}&{{ encounter.base_label }}_FishingMonsInfo{% else %}NULL{% endif %},
        .hiddenMonsInfo = {% if existsIn(encounter, "hidden_mons") %}&{{ encounter.base_label }}_HiddenMonsInfo{% else %}NULL{% endif %},
    },
## endfor
    {
        .mapGroup = MAP_GROUP(MAP_UNDEFINED),
        .mapNum = MAP_NUM(MAP_UNDEFINED),
        .landMonsInfo = NULL,
        .waterMonsInfo = NULL,
        .rockSmashMonsInfo = NULL,
        .fishingMonsInfo = NULL,
        .hiddenMonsInfo = NULL,
    },
};
## endfor
